<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL DML</title>
      <link href="/2023/10/01/MySQL/DML/"/>
      <url>/2023/10/01/MySQL/DML/</url>
      
        <content type="html"><![CDATA[<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>DML(Data Mainpulation Language)数据操作语言，用来对数据库中表的数据记录进行增删操作</p><ul><li>添加数据(INSERT)</li><li>修改数据(UPDATE)</li><li>删除数据(DELETE)</li></ul><h2 id="2-添加数据"><a href="#2-添加数据" class="headerlink" title="2.添加数据"></a>2.添加数据</h2><ul><li>给指定字段添加数据<br><code>INSERT INTO 表名(字段名1,字段名2....) VALUES(值1,值2......);</code><br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211715401.png" alt="image.png"></li></ul><ul><li>给全部字段添加数据<br><code>INSERT INTO 表名 VALUES(值1,值2......);</code><br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211719981.png" alt="image.png"></li></ul><ul><li>批量添加数据<br><code>INSERT INTO 表名(字段名1，字段名2，.....)VALUES(值1，值2，.....),(值1，值2，.....),(值1，值2，.....);</code></li></ul><p><code>INSERT INTO 表名VALUES(值1，值2，....),(值1，值2，....),(值1，值2，....);</code><br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211723826.png" alt="image.png"></p><p>注：</p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期数据类型应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内</li></ul><h2 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h2><p><code>UPDATE 表名 SET 字段名1=值1，字段名2=值2，.....[WHERE 条件]</code> </p><ul><li><p>单条件修改<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211731488.png" alt="image.png"></p></li><li><p>多条件修改<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211734924.png" alt="image.png"></p></li></ul><ul><li>整表修改<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211822008.png" alt="image.png"></li></ul><p>注意：修改语句的条件可以有，也可以没有。如果没有条件，则会修改整张表的所有数据</p><h2 id="4-删除数据"><a href="#4-删除数据" class="headerlink" title="4.删除数据"></a>4.删除数据</h2><p><code>DELETE FROM 表名 [WHERE 条件];</code></p><ul><li><p>条件删除<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211829305.png" alt="image.png"></p></li><li><p>整表删除<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309211830970.png" alt="image.png"></p></li></ul><p>注意：</p><ul><li>DELETE语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</li><li>DELETE语句不能删除某个字段的值(可以用update)</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 printf()和scanf()详解</title>
      <link href="/2023/10/01/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%20printf()%E5%92%8Cscanf()%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/10/01/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%20printf()%E5%92%8Cscanf()%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-字符和字符串"><a href="#1-字符和字符串" class="headerlink" title="1.字符和字符串"></a><strong>1.字符和字符串</strong></h1><h2 id="1-1-字符型常量"><a href="#1-1-字符型常量" class="headerlink" title="1.1  字符型常量"></a><strong>1.1  字符型常量</strong></h2><p>字符型常量的形式如下</p><ol><li>用单引号括起来的一个字符，如’a’、’2’</li><li>合法的转义字符，可见另一篇文章<br>[[C语言 转义字符详解]]</li></ol><h2 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a><strong>1.2 字符串</strong></h2><blockquote><p>字符串是一个或者多个字符的序列，如”Hello world!”,但需要注意的是双引号不是字符串的一部分，双引号仅告知编译器它括起来的是字符串</p></blockquote><p>在C语言中，没用专门用来存储字符串的变量类型，即没有原生的String类型，字符串都被存储在char类型的数组中，数组由连续的存储单元组成，而字符串中的字符被存储在相邻的存储单元中，其中每个单元存储一个字符，并且以空字符 \0来结束 ，如图<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202307051413485.png" alt="字符串比较"></p><p>因此在C语言中字符长度和存储它的单元大小有所不同<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> length <span class="string">&quot;Hello world&quot;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">char</span> Demo1[] =<span class="string">&quot;Hello world!&quot;</span>;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen为%zd\n&quot;</span>,<span class="built_in">strlen</span>(Demo1));  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof为%zd\n&quot;</span>,<span class="keyword">sizeof</span>(Demo1));  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202307051429390.png" alt="运行结果"></p><h1 id="2-printf-函数"><a href="#2-printf-函数" class="headerlink" title="2. printf()函数"></a><strong>2. printf()函数</strong></h1><p>printf()是C库的输出函数，用于格式化后的字符串输出，使用时需申明头文件<strong>stdio.h</strong><br>在请求printf()函数打印数据的指令要与待打印数据类型相匹配，即需要使用相对应的转换说明</p><h2 id="2-1-格式"><a href="#2-1-格式" class="headerlink" title="2.1   格式"></a>2.1   <strong>格式</strong></h2><p>printf(格式字符串，待打印项1，待打印项2，……)<br>格式化字符串的构成：实际要打印的字符和转换说明<br>如`printf(“参数二为%d.\n”,a); </p><h2 id="2-2-转换说明的构成"><a href="#2-2-转换说明的构成" class="headerlink" title="2.2  转换说明的构成"></a>2.2  <strong>转换说明的构成</strong></h2><p><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202307061337410.png" alt="构成"></p><p>简单来说分为两点</p><ol><li>转换说明</li><li>修饰符，而修饰符又可以进行细分，如图<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202307061342782.png" alt="修饰符"></li></ol><h3 id="2-2-1-转换说明"><a href="#2-2-1-转换说明" class="headerlink" title="2.2.1 转换说明"></a>2.2.1 转换说明</h3><div class="table-container"><table><thead><tr><th style="text-align:center">转换说明</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%a</td><td>浮点数、十六进制数和p记数法</td></tr><tr><td style="text-align:center">%A</td><td>浮点数、十六进制数和p记数法</td></tr><tr><td style="text-align:center">%c</td><td>单个字符</td></tr><tr><td style="text-align:center">%d</td><td>有符号十进制整数</td></tr><tr><td style="text-align:center">%e</td><td>浮点数、e记数法</td></tr><tr><td style="text-align:center">%E</td><td>浮点数、e记数法</td></tr><tr><td style="text-align:center">%f</td><td>浮点数、十进制记数法</td></tr><tr><td style="text-align:center">%g</td><td>根据值的不同，自动选择%f或%e</td></tr><tr><td style="text-align:center">%G</td><td>根据值的不同，自动选择%f或%e</td></tr><tr><td style="text-align:center">%i</td><td>有符号的十进制整数（和%d相同）</td></tr><tr><td style="text-align:center">%p</td><td>指针</td></tr><tr><td style="text-align:center">%s</td><td>字符串</td></tr><tr><td style="text-align:center">%o</td><td>无符号八进制整数</td></tr><tr><td style="text-align:center">%u</td><td>无符号十进制整数</td></tr><tr><td style="text-align:center">%x</td><td>无符号十六进制整数，使用十六进制数0f</td></tr><tr><td style="text-align:center">%X</td><td>无符号十六进制整数，使用十六进制数0F</td></tr><tr><td style="text-align:center">% %</td><td>打印一个百分号</td></tr></tbody></table></div><h3 id="2-2-2-标记"><a href="#2-2-2-标记" class="headerlink" title="2.2.2 标记"></a>2.2.2 标记</h3><div class="table-container"><table><thead><tr><th style="text-align:center">标记</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">—</td><td>待打印项左对齐。即从字段的左侧开始打印该项</td></tr><tr><td style="text-align:center">*</td><td>可代替字段宽度，放在%和转换说明符之间</td></tr><tr><td style="text-align:center">+</td><td>有符号值若为正，则在值在前面显示加号；若为负，则在值前面显示减号</td></tr><tr><td style="text-align:center">空格</td><td>有符号值若为正，则在值前面显示前导空格(不显示任何符号)；若为负，则在值前面显示减号，但+标记会覆盖空格</td></tr><tr><td style="text-align:center">#</td><td>把结果转换为另一种形式。如果是%o格式，则是以0开始；如果是%x或%X格式，则以0x或者0X开始；对于所有的浮点格式，#保证了即使后面没有任何数字，也打印一个小数点字符。对于%g和%G格式，#防止结果后面的0被删除</td></tr><tr><td style="text-align:center">0</td><td>对于数值格式，用前导0代替空格填充字段宽度。对于整数格式，如果出现-标记或者指定精度，则忽略该标记</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  <span class="comment">//这里为了直观看清区别，我将字段宽度规定为10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">int</span> a = <span class="number">121</span>;  </span><br><span class="line"><span class="type">int</span> b =<span class="number">10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%-10d]\n&quot;</span>,a);<span class="comment">//标记为 -</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%+10d]\n&quot;</span>,a);<span class="comment">//标记为 +</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%+10d]\n&quot;</span>,-a);<span class="comment">//标记为 +，测试值为负的情况  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[% 10d]\n&quot;</span>,a);<span class="comment">//标记为空格  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%#10o]\n&quot;</span>,a);<span class="comment">//标记为 #的%o格式  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%#10X]\n&quot;</span>,a);<span class="comment">//标记为 #的%X格式  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%010d]\n&quot;</span>,a);<span class="comment">//标记为 0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%*d]\n&quot;</span>,b,a);<span class="comment">//标记为 *</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">[<span class="number">121</span>       ]</span><br><span class="line">[      +<span class="number">121</span>]</span><br><span class="line">[      <span class="number">-121</span>]</span><br><span class="line">[       <span class="number">121</span>]</span><br><span class="line">[      <span class="number">0171</span>]</span><br><span class="line">[      <span class="number">0X79</span>]</span><br><span class="line">[<span class="number">0000000121</span>]</span><br><span class="line">[       <span class="number">121</span>]</span><br></pre></td></tr></table></figure><h3 id="2-2-3-数字和精度"><a href="#2-2-3-数字和精度" class="headerlink" title="2.2.3 数字和精度"></a>2.2.3 数字和精度</h3><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">数字</td><td>输出时的最小字段宽度，但如果该字段不能容纳待打印的数字和字符串，系统则会使用更宽的字段</td></tr><tr><td style="text-align:center">.数字</td><td>精度的要求<br>对于%e、%E和%f转换，表示小数点右边数字的位数<br>对于%g和%G转换，表示有效数字的最大位数<br>对于%s转换，表示待打印字符的最大数量<br>对于整型转换，表示待打印数字的最小位数<br>如有必要，使用前导0来达到这个位数<br>只使用.表示其后跟随一个0，所以%.f和%.0f相同</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">double</span> a = <span class="number">121.33</span>;  </span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line"><span class="type">int</span> c = <span class="number">0324</span>;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%f]\n&quot;</span>,a);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%.3e]\n&quot;</span>,a);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%10.3g]\n&quot;</span>,a);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%10.6g]\n&quot;</span>,a);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%10.3s]\n&quot;</span>,b);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%.6d]\n&quot;</span>,c);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%10.6d]\n&quot;</span>,c);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">[<span class="number">121.330000</span>]</span><br><span class="line">[<span class="number">1.213e+002</span>]</span><br><span class="line">[       <span class="number">121</span>]</span><br><span class="line">[    <span class="number">121.33</span>]</span><br><span class="line">[       hel]</span><br><span class="line">[<span class="number">000324</span>]</span><br><span class="line">[    <span class="number">000324</span>]</span><br></pre></td></tr></table></figure><h3 id="2-2-4-类型表示的修饰符"><a href="#2-2-4-类型表示的修饰符" class="headerlink" title="2.2.4 类型表示的修饰符"></a>2.2.4 类型表示的修饰符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td>和整型转换说明一起使用，表示short或unsigned short类型的值</td></tr><tr><td style="text-align:center">hh</td><td>和整型转换说明一起使用，表示char或unsigned char类型的值</td></tr><tr><td style="text-align:center">l</td><td>和整型转换说明一起使用，表示long或unsigned long类型的值</td></tr><tr><td style="text-align:center">ll</td><td>和整型转换说明一起使用,表示long long或者unsigned long long类型的值</td></tr><tr><td style="text-align:center">L</td><td>和浮点转换说明一起使用，表示long double类型的值</td></tr><tr><td style="text-align:center">z</td><td>和整型转换说明一起使用，表示size_t类型的值，size_t是sizeof返回的类型</td></tr></tbody></table></div><h1 id="3-scanf"><a href="#3-scanf" class="headerlink" title="3. scanf()"></a><strong>3. scanf()</strong></h1><p>printf()是C库的输入函数，用于格式化后的字符串输入，使用时需申明头文件<strong>stdio.h</strong><br>在请求scanf()函数打印数据的指令要与待打印数据类型相匹配，即需要使用相对应的转换说明</p><h2 id="3-1-格式"><a href="#3-1-格式" class="headerlink" title="3.1 格式"></a><strong>3.1 格式</strong></h2><p>scanf(格式化字符串，参数列表)</p><ul><li>格式化字符串表明字符输出流的目标数据类型。</li><li>参数列表中使用指向变量的指针，其中两条规则<br>  1.如果用scanf()读取基本变量类型的值，在变量名前需加一个&amp;<br>  2.如果用scanf()把字符串读入字符数组中，不用使用&amp;</li></ul><h2 id="3-2-转换说明"><a href="#3-2-转换说明" class="headerlink" title="3.2 转换说明"></a><strong>3.2 转换说明</strong></h2><p><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202307071312361.png" alt="image.png"></p><p>其中修饰符又可以进行细分</p><pre><code>1. *2. 数字3. 类型表示</code></pre><h3 id="3-2-1-转换说明"><a href="#3-2-1-转换说明" class="headerlink" title="3.2.1 转换说明"></a><strong>3.2.1 转换说明</strong></h3><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">%c</td><td>把输入解释为字符</td></tr><tr><td style="text-align:center">%d</td><td>把输入解释为有符号十进制整数</td></tr><tr><td style="text-align:center">%i</td><td>把输入解释为有符号十进制整数</td></tr><tr><td style="text-align:center">%o</td><td>把输入解释为有符号八进制整数</td></tr><tr><td style="text-align:center">%p</td><td>把输入解释为指针</td></tr><tr><td style="text-align:center">%s</td><td>把输入解释为字符串，从第一个非空白字符开始，到下一个空白字符之前的所有字符都是输入</td></tr><tr><td style="text-align:center">%u</td><td>把输入解释为无符号十进制整数</td></tr><tr><td style="text-align:center">%e、%f、%g、%a</td><td>把输入解释为浮点数</td></tr><tr><td style="text-align:center">%E、%F、%E、%A</td><td>把输入解释为浮点数</td></tr><tr><td style="text-align:center">%x、%X</td><td>把输入解释为有符号十六进制整数</td></tr></tbody></table></div><p><strong>空白字符：</strong>. ：1.空格（‘ ’）<br>                       2.换页（‘\f’）<br>                       3.换行（‘\n’）<br>                       4.回车（‘\r’）<br>                       5.水平制表符（‘\t’）<br>                       6.垂直制表符（‘\v’）</p><h5 id="3-2-1-1-细节"><a href="#3-2-1-1-细节" class="headerlink" title="3.2.1.1 细节"></a><strong>3.2.1.1 细节</strong></h5><ul><li>scanf()中可以把普通字符放在格式化字符串中，但除了空格字符外，在输入时必须严格匹配，如<code>scanf(&quot;%d,%d&quot;,&amp;a,&amp;b);</code>这里输入时必须输入<code>12,13</code> ,不能缺少逗号.但如果是<code>scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</code>在输入时，需要至少一个空格作为间隔,如<code>12 13</code>和<code>12         13</code>输入时效果一样</li><li>一般，scanf()函数每次读取一个字符，跳过所有的空白字符，直到遇到第一个非空白字符才开始读取</li><li>在%d中，如果第一个非空白字符为非数字字符，scanf()会停止读取，并把A放回输入中，不会把值赋给指定变量，而程序在下一次读取输入时，首先读取的字符是A，但如果只使用%d转换说明，scanf()则会无法跨越A读取下一个字符</li><li>对于%c中，会从第一个字符开始读取，而不再是第一个非空白字符。如果需要从第一个非空白字符读取，则需要格式字符串前加一个空格，如<code>scanf(&quot; %c&quot;,&amp;a)</code></li></ul><h3 id="3-2-2-转换说明的修饰符"><a href="#3-2-2-转换说明的修饰符" class="headerlink" title="3.2.2 转换说明的修饰符"></a><strong>3.2.2 转换说明的修饰符</strong></h3><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>抑制赋值</td></tr><tr><td style="text-align:center">数字</td><td>最大字符宽度。输入达到最大字段宽度处，或第1次遇到空白字符时停止</td></tr><tr><td style="text-align:center">hh</td><td>把整数作为signed char或者unsigned char类型读取</td></tr><tr><td style="text-align:center">ll</td><td>把整数作为long long或unsigned long long类型读取</td></tr><tr><td style="text-align:center">h、l和L</td><td>%hd和%hi表明把对应的值存储为short类型；<br>%ho、%hx和%hu表明把对应的值存储为unsigned short类型<br>%ld和%li表明把对应的值存储为long类型<br>%lo、lx和%lu表明把对应的值存储为unsigned long类型<br>%le、%lf和%lg表明把对应的值存储为double类型<br>在e、f和g前面使用L而不是l，表明把对应的值被存储为long double类型</td></tr><tr><td style="text-align:center">z</td><td>在整型转换说明后面时，表明使用sizeof的返回类型</td></tr></tbody></table></div><p>对于* 有抑制赋值的作用，即会使scanf()跳过相应的输入项<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">int</span> a;  </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*d %*d %d&quot;</span>,&amp;a);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a为%d&quot;</span>,a);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我输入`3 24 324<br>运行结果为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a为<span class="number">324</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本概念和术语"><a href="#1-基本概念和术语" class="headerlink" title="1.基本概念和术语"></a>1.基本概念和术语</h1><p>程序设计：为计算机处理问题编制一组指令集<br>算法：处理问题的策略<br>数据：所有能被输入到计算机中，且能被计算机处理的符号的集合，是计算机操作的对象的总称，是计算机处理的信息的某种特定的符号表现形式<br>数据元素：数据的基本单位，在计算机中通常作为一个整体进行考虑和处理，一个数据元素可由若干个数据项组成，即使数据的一个个体<br>数据项：是数据结构中讨论的数据最小单位<br>数据对象：性质相同的数据元素的集合，是数据的一个子集</p><hr><h1 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2.数据结构"></a>2.数据结构</h1><ul><li>在数据结构中，数据元素不是孤立存在的，它们存在着某种关系，<strong>数据元素相互之间的关系称为结构</strong></li><li>或者是<strong>相互之间存在一种或者多种特定的关系</strong>的数据元素集合</li><li>亦或者是带结构的数据元素的集合</li></ul><p>数据结构包括以下三个方面的内容</p><ol><li>数据元素之间的逻辑关系，也称为逻辑结构</li><li>数据元素及其关系在计算机内存中的表示（又称之为映像），称为数据结构的<strong>物理结构</strong>或数据的存储结构</li><li>数据的运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现</li></ol><h2 id="2-1逻辑结构"><a href="#2-1逻辑结构" class="headerlink" title="2.1逻辑结构"></a>2.1逻辑结构</h2><p>数据的四种基本逻辑结构：</p><ul><li>线性结构，有且仅有一个开始和一个终端结点，并且所有的结点都最多只有一个直接前趋和一个直接后继</li><li>树形结构</li><li>图形结构或网状结构</li><li>集合结构<br>数据结构的形式定义为：数据结构是一个二元组<br><strong>Data_Structure = (D，S)</strong></li></ul><h2 id="2-2物理结构"><a href="#2-2物理结构" class="headerlink" title="2.2物理结构"></a>2.2物理结构</h2><p>数据结构在计算机中的表示称为数据的物理结构（存储结构），包括数据元素的表示和关系的表示。在计算机中，我们可以用一个若干位组合起来形成的一位串表示一个数据元素，通常称这个位串为元素或结点。当数据元素由若干数据项组成时，位串中对应于各个数据项的子位串称为数据域，因此，元素或结点可看成是数据元素在计算机中的映像。</p><p>物理结构有四种基本的存储结构</p><ul><li>顺序存储结构：用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示</li><li>链式存储结构：用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示</li><li>索引存储结构：在存储节点信息的同时，还建立附加的索引表</li><li>散列存储结构：根据结点的关键字直接计算出该结点的存储地址</li></ul><h2 id="2-3抽象数据类型"><a href="#2-3抽象数据类型" class="headerlink" title="2.3抽象数据类型"></a>2.3抽象数据类型</h2><p>抽象数据类型(Abstract Data Type，ADT):是指一个数据模型以及定义在此数学模型上的一组操作</p><ul><li>由用户定义，从问题抽象出数据模型(逻辑结构)</li><li>还包括定义在数据模型上的一组抽象运算(相关操作)</li><li>不考虑计算机内的具体存储结构与运算的具体实现算法</li></ul><p><strong>形式定义</strong><br>抽象数据类型可用(D,S,P)三元组表示</p><ul><li>D是数据对象</li><li>S是D上的关系集</li><li>P是对D的基本操作集</li></ul><p><strong>定义格式</strong><br>ADT 抽象数据类型{</p><p>数据对象:&lt;数据对象的定义&gt;<br>数据关系:&lt;数据关系的定义&gt;<br>基本操作:&lt;基本操作的定义&gt;</p><p>} ADT 抽象数据类型<br>注：</p><ul><li>数据对象、数据关系的定义用伪代码描述</li><li>基本操作的定义格式为：<ul><li>基本操作名（参数表）</li><li>初始条件:&lt;初始条件描述&gt;</li><li>操作结果:&lt;操作结果描述&gt;</li></ul></li></ul><p>小结<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309171430744.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Arrays类</title>
      <link href="/2023/10/01/Java/API/Arrays%E7%B1%BB/"/>
      <url>/2023/10/01/Java/API/Arrays%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><h2 id="1-1-toString（数组）"><a href="#1-1-toString（数组）" class="headerlink" title="1.1 toString（数组）"></a>1.1 toString（数组）</h2><ul><li>作用：将数组拼接成一个字符串</li></ul><hr><p>底层代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">     b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">         b.append(a[i]);</span><br><span class="line">         <span class="keyword">if</span> (i == iMax)</span><br><span class="line">             <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">         b.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-binarySearch（数组，查找的元素）"><a href="#1-2-binarySearch（数组，查找的元素）" class="headerlink" title="1.2 binarySearch（数组，查找的元素）"></a>1.2 binarySearch（数组，查找的元素）</h2><ul><li><strong>作用：二分法查找元素，返回索引</strong></li><li><strong>细节1：二分查找的前提是数组中的元素必须是有序的，而且要是升序的</strong></li><li><strong>细节2：如果要查找的元素是存在的，那么返回的是真实的索引</strong></li><li><strong>细节3：如果要查找的元素是不存在的，那么返回的是 -插入点-1（-1的目的是避免插入点为0时返回-0）</strong></li></ul><hr><p>底层代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch0(a, <span class="number">0</span>, a.length, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> fromIndex;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> a[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midVal &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-copyof（）"><a href="#1-3-copyof（）" class="headerlink" title="1.3 copyof（）"></a>1.3 copyof（）</h2><ul><li><strong>拷贝数组</strong></li><li><strong>细节：如果新数组的长度是小于老数组的长度，则会部分拷贝；如果大于，则会补上默认初始化值</strong></li></ul><hr><p>底层代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOf(<span class="type">int</span>[] original, <span class="type">int</span> newLength) &#123;</span><br><span class="line">    <span class="type">int</span>[] copy = <span class="keyword">new</span> <span class="title class_">int</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4-copyOfRange-拷贝数组，初始索引，结束索引"><a href="#1-4-copyOfRange-拷贝数组，初始索引，结束索引" class="headerlink" title="1.4 copyOfRange(拷贝数组，初始索引，结束索引)"></a>1.4 copyOfRange(拷贝数组，初始索引，结束索引)</h2><ul><li><strong>细节:包头不包尾</strong></li></ul><hr><p>底层代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOfRange(<span class="type">int</span>[] original, <span class="type">int</span> from, <span class="type">int</span> to) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newLength</span> <span class="operator">=</span> to - from;</span><br><span class="line">    <span class="keyword">if</span> (newLength &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(from + <span class="string">&quot; &gt; &quot;</span> + to);</span><br><span class="line">    <span class="type">int</span>[] copy = <span class="keyword">new</span> <span class="title class_">int</span>[newLength];</span><br><span class="line">    System.arraycopy(original, from, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length - from, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-5-sort（）"><a href="#1-5-sort（）" class="headerlink" title="1.5 sort（）"></a>1.5 sort（）</h2><h4 id="快速排序（默认情况）"><a href="#快速排序（默认情况）" class="headerlink" title="快速排序（默认情况）"></a>快速排序（默认情况）</h4><hr><p>底层代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    DualPivotQuicksort.sort(a, <span class="number">0</span>, <span class="number">0</span>, a.length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> parallelism, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> high - low;</span><br><span class="line">    <span class="keyword">if</span> (parallelism &gt; <span class="number">1</span> &amp;&amp; size &gt; MIN_PARALLEL_SORT_SIZE) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> getDepth(parallelism, size &gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="type">int</span>[] b = depth == <span class="number">0</span> ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Sorter</span>(<span class="literal">null</span>, a, b, low, size, low, depth).invoke();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sort(<span class="literal">null</span>, a, <span class="number">0</span>, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="指定规则的排列"><a href="#指定规则的排列" class="headerlink" title="指定规则的排列"></a>指定规则的排列</h4><hr><p>底层代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中需要传递的参数：</p><ul><li><strong>T[ ]</strong>：需要排列的数组，但<strong>这数组只能给引用数据类型的数组进行排序</strong>，所以如果数组是基本数据类型，需要变成对应的包装类</li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt;</span><br></pre></td></tr></table></figure><p><strong>Comparator&lt;? super T&gt; c</strong>：排序的规则。从源码看出为一个接口，我们在调用方法时，需要传递这个接口的实现类对象，作为排序的规则</p><hr><p>实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Object&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1-o2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>o1-o2:升序排列</p><p>o2-o1: 降序排列</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
